name: CMake Build

on:
  push:
    paths:
      - '**.h'
      - '**.cpp'
      - '**.c'
      - '**.hpp'
      - '**.cmake'
      - '**/CMakeLists.txt'
      - '.github/workflows/**'

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false

      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        lib_type: [Static, Shared]
        c_compiler: [gcc, clang, cl]
        problem_matcher: [gcc, msvc]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            problem_matcher: msvc
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            problem_matcher: gcc
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: windows-latest
            problem_matcher: gcc
          - os: ubuntu-latest
            c_compiler: cl
          - os: ubuntu-latest
            problem_matcher: msvc

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
        echo "build-shared=${{ matrix.lib_type == 'Static' && 'OFF' || 'ON' }}" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DBUILD_SHARED_LIBS=${{ steps.strings.outputs.build-shared }}
        -S ${{ github.workspace }}

    - name: Build
      run: |
        echo "::add-matcher::.github/problem-matchers/${{ matrix.problem_matcher }}.json"
        cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    # TODO: are there any tests we can do, given GitHub doesn't have an ABS?
    #- name: Test
    #  working-directory: ${{ steps.strings.outputs.build-output-dir }}
    #  run: ctest --build-config ${{ matrix.build_type }}
